diff --git a/src/hotspot/cpu/riscv/riscv.ad b/src/hotspot/cpu/riscv/riscv.ad
index cb9b4958481..5cdd2c9e359 100644
--- a/src/hotspot/cpu/riscv/riscv.ad
+++ b/src/hotspot/cpu/riscv/riscv.ad
@@ -940,8 +940,8 @@ definitions %{
   int_def IMUL_COST            ( 1000, 10 * DEFAULT_COST);          // imul
   int_def IDIVSI_COST          ( 3400, 34 * DEFAULT_COST);          // idivdi
   int_def IDIVDI_COST          ( 6600, 66 * DEFAULT_COST);          // idivsi
-  int_def FMUL_SINGLE_COST     (  500,  5 * DEFAULT_COST);          // fadd, fmul, fmadd
-  int_def FMUL_DOUBLE_COST     (  700,  7 * DEFAULT_COST);          // fadd, fmul, fmadd
+  int_def FMUL_SINGLE_COST     (  500,  5 * DEFAULT_COST);          // fmul, fmadd
+  int_def FMUL_DOUBLE_COST     (  700,  7 * DEFAULT_COST);          // fmul, fmadd
   int_def FDIV_COST            ( 2000, 20 * DEFAULT_COST);          // fdiv
   int_def FSQRT_COST           ( 2500, 25 * DEFAULT_COST);          // fsqrt
   int_def VOLATILE_REF_COST    ( 1000, 10 * DEFAULT_COST);
@@ -6940,7 +6940,7 @@ instruct regI_not_reg(iRegINoSp dst, iRegI src1, immI_M1 m1) %{
     __ xori(as_Register($dst$$reg), as_Register($src1$$reg), -1);
   %}
 
-  ins_pipe(ialu_reg);
+  ins_pipe(ialu_reg_imm);
 %}
 
 instruct regL_not_reg(iRegLNoSp dst, iRegL src1, immL_M1 m1) %{
@@ -6952,7 +6952,7 @@ instruct regL_not_reg(iRegLNoSp dst, iRegL src1, immL_M1 m1) %{
     __ xori(as_Register($dst$$reg), as_Register($src1$$reg), -1);
   %}
 
-  ins_pipe(ialu_reg);
+  ins_pipe(ialu_reg_imm);
 %}
 
 
@@ -6962,7 +6962,7 @@ instruct regL_not_reg(iRegLNoSp dst, iRegL src1, immL_M1 m1) %{
 instruct addF_reg_reg(fRegF dst, fRegF src1, fRegF src2) %{
   match(Set dst (AddF src1 src2));
 
-  ins_cost(FMUL_SINGLE_COST);
+  ins_cost(DEFAULT_COST * 5);
   format %{ "fadd.s  $dst, $src1, $src2\t#@addF_reg_reg" %}
 
   ins_encode %{
@@ -6977,7 +6977,7 @@ instruct addF_reg_reg(fRegF dst, fRegF src1, fRegF src2) %{
 instruct addD_reg_reg(fRegD dst, fRegD src1, fRegD src2) %{
   match(Set dst (AddD src1 src2));
 
-  ins_cost(FMUL_DOUBLE_COST);
+  ins_cost(DEFAULT_COST * 5);
   format %{ "fadd.d  $dst, $src1, $src2\t#@addD_reg_reg" %}
 
   ins_encode %{
@@ -6992,7 +6992,7 @@ instruct addD_reg_reg(fRegD dst, fRegD src1, fRegD src2) %{
 instruct subF_reg_reg(fRegF dst, fRegF src1, fRegF src2) %{
   match(Set dst (SubF src1 src2));
 
-  ins_cost(FMUL_SINGLE_COST);
+  ins_cost(DEFAULT_COST * 5);
   format %{ "fsub.s  $dst, $src1, $src2\t#@subF_reg_reg" %}
 
   ins_encode %{
@@ -7007,7 +7007,7 @@ instruct subF_reg_reg(fRegF dst, fRegF src1, fRegF src2) %{
 instruct subD_reg_reg(fRegD dst, fRegD src1, fRegD src2) %{
   match(Set dst (SubD src1 src2));
 
-  ins_cost(FMUL_DOUBLE_COST);
+  ins_cost(DEFAULT_COST * 5);
   format %{ "fsub.d  $dst, $src1, $src2\t#@subD_reg_reg" %}
 
   ins_encode %{
@@ -7210,7 +7210,7 @@ instruct maxF_reg_reg(fRegF dst, fRegF src1, fRegF src2, rFlagsReg cr) %{
                  false /* is_double */, false /* is_min */);
   %}
 
-  ins_pipe(fp_dop_reg_reg_s);
+  ins_pipe(pipe_class_default);
 %}
 
 // Math.min(FF)F
@@ -7226,7 +7226,7 @@ instruct minF_reg_reg(fRegF dst, fRegF src1, fRegF src2, rFlagsReg cr) %{
                  false /* is_double */, true /* is_min */);
   %}
 
-  ins_pipe(fp_dop_reg_reg_s);
+  ins_pipe(pipe_class_default);
 %}
 
 // Math.max(DD)D
@@ -7242,7 +7242,7 @@ instruct maxD_reg_reg(fRegD dst, fRegD src1, fRegD src2, rFlagsReg cr) %{
                  true /* is_double */, false /* is_min */);
   %}
 
-  ins_pipe(fp_dop_reg_reg_d);
+  ins_pipe(pipe_class_default);
 %}
 
 // Math.min(DD)D
@@ -7258,7 +7258,7 @@ instruct minD_reg_reg(fRegD dst, fRegD src1, fRegD src2, rFlagsReg cr) %{
                  true /* is_double */, true /* is_min */);
   %}
 
-  ins_pipe(fp_dop_reg_reg_d);
+  ins_pipe(pipe_class_default);
 %}
 
 instruct divF_reg_reg(fRegF dst, fRegF src1, fRegF src2) %{

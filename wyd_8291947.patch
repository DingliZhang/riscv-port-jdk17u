diff --git a/src/hotspot/cpu/riscv/icache_riscv.cpp b/src/hotspot/cpu/riscv/icache_riscv.cpp
index 922a80f9f3e..9b628738852 100644
--- a/src/hotspot/cpu/riscv/icache_riscv.cpp
+++ b/src/hotspot/cpu/riscv/icache_riscv.cpp
@@ -30,7 +30,7 @@
 #define __ _masm->
 
 static int icache_flush(address addr, int lines, int magic) {
-  os::icache_flush((long int) addr, (long int) (addr + (lines << ICache::log2_line_size)));
+  __builtin___clear_cache(addr, addr + (lines << ICache::log2_line_size));
   return magic;
 }
 
diff --git a/src/hotspot/os_cpu/linux_riscv/os_linux_riscv.hpp b/src/hotspot/os_cpu/linux_riscv/os_linux_riscv.hpp
index 6d415630661..f3e3a73bc5e 100644
--- a/src/hotspot/os_cpu/linux_riscv/os_linux_riscv.hpp
+++ b/src/hotspot/os_cpu/linux_riscv/os_linux_riscv.hpp
@@ -37,23 +37,4 @@
     *(jlong *) dst = *(const jlong *) src;
   }
 
-  // SYSCALL_RISCV_FLUSH_ICACHE is used to flush instruction cache. The "fence.i" instruction
-  // only work on the current hart, so kernel provides the icache flush syscall to flush icache
-  // on each hart. You can pass a flag to determine a global or local icache flush.
-  static void icache_flush(long int start, long int end)
-  {
-    const int SYSCALL_RISCV_FLUSH_ICACHE = 259;
-    register long int __a7 asm ("a7") = SYSCALL_RISCV_FLUSH_ICACHE;
-    register long int __a0 asm ("a0") = start;
-    register long int __a1 asm ("a1") = end;
-    // the flush can be applied to either all threads or only the current.
-    // 0 means a global icache flush, and the icache flush will be applied
-    // to other harts concurrently executing.
-    register long int __a2 asm ("a2") = 0;
-    __asm__ volatile ("ecall\n\t"
-                      : "+r" (__a0)
-                      : "r" (__a0), "r" (__a1), "r" (__a2), "r" (__a7)
-                      : "memory");
-  }
-
 #endif // OS_CPU_LINUX_RISCV_VM_OS_LINUX_RISCV_HPP
